!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module lbfgs ! in 
    interface  ! in :lbfgs
        subroutine lbfgs(n,m,x,f,g,diagco,diag,iprint,eps,xtol,w,iflag,irest,xk,dk,stpk,oflag) ! in :lbfgs:lbfgs.f
            integer, optional,intent(in),check(shape(x, 0) == n),depend(x) :: n=shape(x, 0)
            integer, required,intent(in) :: m
            double precision dimension(n),intent(inout) :: x
            double precision intent(in) :: f
            double precision dimension(n),intent(inout),depend(n) :: g
            logical intent(in) :: diagco
            double precision dimension(n),intent(inout),depend(n) :: diag
            integer dimension(2),intent(in) :: iprint
            double precision intent(in) :: eps
            double precision intent(in) :: xtol
            double precision dimension(2 * m + n + 2 * m * n),intent(inout),check(shape(w, 0) == 2 * m + n + 2 * m * n),depend(n,m) :: w
            integer intent(in) :: iflag
            integer intent(in) :: irest
            double precision dimension(n),intent(out),depend(n) :: xk
            double precision dimension(n),intent(out),depend(n) :: dk
            double precision intent(out) :: stpk
            integer intent(out) :: oflag
            integer :: mp
            integer :: lp
            double precision :: gtol
            double precision :: stpmin
            double precision :: stpmax
            common /lb3/ mp,lp,gtol,stpmin,stpmax
        end subroutine lbfgs
        subroutine lb1(iprint,iter,nfun,gnorm,n,m,x,f,g,stp,finish) ! in :lbfgs:lbfgs.f
            integer dimension(2) :: iprint
            integer :: iter
            integer :: nfun
            double precision :: gnorm
            integer, optional,check(shape(x, 0) == n),depend(x) :: n=shape(x, 0)
            integer :: m
            double precision dimension(n) :: x
            double precision :: f
            double precision dimension(n),depend(n) :: g
            double precision :: stp
            logical :: finish
            integer :: mp
            integer :: lp
            double precision :: gtol
            double precision :: stpmin
            double precision :: stpmax
            common /lb3/ mp,lp,gtol,stpmin,stpmax
        end subroutine lb1
        block data lb2 ! in :lbfgs:lbfgs.f
            integer, optional :: mp=6
            integer, optional :: lp=6
            double precision, optional :: gtol=9.0d-01
            double precision, optional :: stpmin=1.0d-20
            double precision, optional :: stpmax=1.0d+20
            common /lb3/ mp,lp,gtol,stpmin,stpmax
        end block data lb2
        subroutine daxpy(n,da,dx,incx,dy,incy) ! in :lbfgs:lbfgs.f
            integer :: n
            double precision :: da
            double precision dimension(1) :: dx
            integer :: incx
            double precision dimension(1) :: dy
            integer :: incy
        end subroutine daxpy
        function ddot(n,dx,incx,dy,incy) ! in :lbfgs:lbfgs.f
            integer :: n
            double precision dimension(1) :: dx
            integer :: incx
            double precision dimension(1) :: dy
            integer :: incy
            double precision :: ddot
        end function ddot
        subroutine mcsrch(n,x,f,g,s,stp,ftol,xtol,maxfev,info,nfev,wa) ! in :lbfgs:lbfgs.f
            integer, optional,check(shape(x, 0) == n),depend(x) :: n=shape(x, 0)
            double precision dimension(n) :: x
            double precision :: f
            double precision dimension(n),depend(n) :: g
            double precision dimension(n),depend(n) :: s
            double precision :: stp
            double precision :: ftol
            double precision :: xtol
            integer :: maxfev
            integer :: info
            integer :: nfev
            double precision dimension(n),depend(n) :: wa
            integer :: mp
            integer :: lp
            double precision :: gtol
            double precision :: stpmin
            double precision :: stpmax
            common /lb3/ mp,lp,gtol,stpmin,stpmax
        end subroutine mcsrch
        subroutine mcstep(stx,fx,dx,sty,fy,dy,stp,fp,dp,brackt,stpmin,stpmax,info) ! in :lbfgs:lbfgs.f
            double precision :: stx
            double precision :: fx
            double precision :: dx
            double precision :: sty
            double precision :: fy
            double precision :: dy
            double precision :: stp
            double precision :: fp
            double precision :: dp
            logical :: brackt
            double precision :: stpmin
            double precision :: stpmax
            integer :: info
        end subroutine mcstep
    end interface 
end python module lbfgs

! This file was auto-generated with f2py (version:1.24.1).
! See:
! https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e
